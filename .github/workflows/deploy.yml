name: Deploy to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: npm test

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: npm test

      - name: Build frontend
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

      - name: Upload build artifacts
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist
          retention-days: 7

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Audit backend dependencies
        working-directory: ./backend
        run: |
          npm ci
          npm audit --audit-level high

      - name: Audit frontend dependencies
        working-directory: ./frontend
        run: |
          npm ci
          npm audit --audit-level high

      - name: Audit Netlify functions dependencies
        working-directory: ./netlify/functions
        run: |
          npm ci
          npm audit --audit-level high

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-audit]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Netlify CLI
        run: npm install -g netlify-cli

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Install function dependencies
        working-directory: ./netlify/functions
        run: npm ci

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

      - name: Deploy preview to Netlify
        run: |
          netlify deploy \
            --dir=frontend/dist \
            --functions=netlify/functions \
            --message="Preview deploy for PR #${{ github.event.number }}"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-audit]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Netlify CLI
        run: npm install -g netlify-cli

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Install function dependencies
        working-directory: ./netlify/functions
        run: npm ci

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

      - name: Deploy to production
        run: |
          netlify deploy \
            --prod \
            --dir=frontend/dist \
            --functions=netlify/functions \
            --message="Production deploy - ${{ github.sha }}"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Verify deployment
        run: |
          sleep 30
          curl -f ${{ secrets.PRODUCTION_URL }}/api/health || exit 1

      - name: Notify deployment success
        if: success()
        run: |
          echo "🚀 Deployment successful!"
          echo "Site URL: ${{ secrets.PRODUCTION_URL }}"

  post-deploy-tests:
    name: Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci
        working-directory: ./backend

      - name: Run integration tests
        run: |
          echo "Running post-deployment health checks..."
          curl -f ${{ secrets.PRODUCTION_URL }} || exit 1
          curl -f ${{ secrets.PRODUCTION_URL }}/api/test-ebay-connection || exit 1
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}

      - name: Monitor application startup
        run: |
          echo "Monitoring application for 2 minutes..."
          for i in {1..12}; do
            if curl -f ${{ secrets.PRODUCTION_URL }}/api/health; then
              echo "Health check $i/12 passed"
            else
              echo "Health check $i/12 failed"
              exit 1
            fi
            sleep 10
          done

      - name: Performance baseline
        run: |
          echo "Checking performance baseline..."
          response_time=$(curl -o /dev/null -s -w "%{time_total}" ${{ secrets.PRODUCTION_URL }})
          echo "Response time: ${response_time}s"
          if (( $(echo "$response_time > 3.0" | bc -l) )); then
            echo "Warning: Response time above 3 seconds"
            exit 1
          fi

  notify-team:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deploy-tests]
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: Deployment notification
        run: |
          if [[ "${{ needs.deploy-production.result }}" == "success" && "${{ needs.post-deploy-tests.result }}" == "success" ]]; then
            echo "✅ Deployment completed successfully!"
            echo "🌐 Production URL: ${{ secrets.PRODUCTION_URL }}"
            echo "📊 All health checks passed"
          else
            echo "❌ Deployment failed or post-deploy tests failed"
            echo "🔍 Check the workflow logs for details"
            exit 1
          fi